#include <SoftwareSerial.h>
#include <TinyGPS.h>

SoftwareSerial mySerial(6, 5); // RX, TX
TinyGPS gps;
void getgps(TinyGPS &gps);


int vibr_Pin =4;
int m=0;
int state = 0;
int REC = 3;
int PLAYE = 2;
char input;

void setup() {
  Serial.begin(9600);
  mySerial.begin(9600);
  pinMode(vibr_Pin, INPUT); //set vibr_Pin input for measurment
  pinMode(REC, OUTPUT);
  pinMode(PLAYE, OUTPUT);
  
  Serial.println("*********command*********");  // [R. 녹음10초] [P. 재생] [S. 정지] [G. gps]
  Serial.println("[G. gps] ");
  Serial.println("[V. vibration]");
  Serial.println("[R. record]");
  Serial.println("[P. play]");
  Serial.println("[S. stop]");
  
}



void loop() {
  
  if(Serial.available())
  {
    input = Serial.read();
    
    if(input == 'V')
    {
      vib();
      Serial.print("measurment = ");
      Serial.println(m);
    }
    else if(input == 'G')
    {
      state = 1;
    }
    else if(input == 'S')
    {
      state = 0;
      digitalWrite(REC,LOW);
      Serial.println("STOP...");
    }
    else if(input == 'R')
    {
      state = 3;
      digitalWrite(REC,HIGH);
      Serial.println("REC...");
    }
    else if(input == 'P')
    {
      state = 4;
      digitalWrite(PLAYE,HIGH);
      Serial.println("PLAYE...");
      digitalWrite(PLAYE,LOW);
    }
  }
  
  if(state==1) {
    while(mySerial.available())     // While there is data on the RX pin...
    { 
      int c = mySerial.read();    // load the data into a variable...
      if(gps.encode(c))      // if there is a new valid sentence...
      {
        getgps(gps);         // then grab the data.
      }   
    }
  }
  else {
    long measurement =TP_init();
  }
}

void vib() {
  state = 2;
}

long TP_init(){
  long measurement=pulseIn (vibr_Pin, HIGH);
  if(measurement>100)
  m++;
  return m;
}

void getgps(TinyGPS &gps) {
  float latitude, longitude;
  gps.f_get_position(&latitude, &longitude);
  Serial.print("Lat/Long: "); 
  Serial.print(latitude,5); 
  Serial.print(", "); 
  Serial.println(longitude,5);
  
  int year;
  byte month, day, hour, minute, second, hundredths;
  gps.crack_datetime(&year,&month,&day,&hour,&minute,&second,&hundredths);

  Serial.print("Date: "); Serial.print(month, DEC); Serial.print("/"); 
  Serial.print(day, DEC); Serial.print("/"); Serial.print(year);
  Serial.print("  Time: "); Serial.print(hour, DEC); Serial.print(":"); 
  Serial.print(minute, DEC); Serial.print(":"); Serial.print(second, DEC); 
  Serial.print("."); Serial.println(hundredths, DEC);

  Serial.print("Altitude (meters): "); Serial.println(gps.f_altitude());  
  Serial.print("Course (degrees): "); Serial.println(gps.f_course()); 
  Serial.print("Speed(kmph): "); Serial.println(gps.f_speed_kmph());
  Serial.println();
  
  unsigned long chars;
  unsigned short sentences, failed_checksum;
  gps.stats(&chars, &sentences, &failed_checksum);
  //Serial.print("Failed Checksums: ");Serial.print(failed_checksum);
  //Serial.println(); Serial.println();
  delay(500);
}